<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dangMember">

	<!-- 댕모임 회원 번호 반환 -->
	<select id = "memberNo" resultType = "int">
		select dang_member_seq.nextval from dual
	</select>

	<!-- 댕모임 개설시 개설자로 가입 -->
	<insert id = "createDang" parameterType = "DangMemberDto">
		insert into dang_member(member_no, dang_no, user_no, member_nick, member_owner) values(#{memberNo}, #{dangNo}, #{userNo}, #{memberNick}, 'Y')
	</insert>

	<!-- 오늘 출석했는지 여부 반환 -->
	<select id="isAttendance" resultType="DangAttendanceDto" parameterType="int">
		select*from dang_attendance where member_no=#{memberNo} and 
		to_char(attendance_date,'yyyymmdd')=to_char(sysdate,'yyyymmdd')
	</select>
	
	<!-- 출석 테이블 insert -->
	<insert id="attendanceInsert" parameterType="DangAttendanceDto">
		insert into dang_attendance(member_no, attendance_date) values(#{memberNo}, sysdate)
	</insert>
	
	<!-- 출석 목록조회(한달기준) -->
	<select id="attendanceList" resultType="DangAttendanceDto"  parameterType="int">
		select*from dang_attendance where member_no=#{memberNo} and 
		to_char(attendance_date,'yyyymm')=to_char(sysdate,'yyyymm')
	</select>

	<!-- 댕모임 닉네임 찾기 -->
	<select id = "findNick" resultType = "String" parameterType="DangMemberDto">
		select member_nick from dang_member where user_no=#{userNo} and dang_no=#{dangNo}
	</select>
	
	<!-- 회원번호 찾기 -->
	<select id = "findMemberNo" resultType = "int" parameterType="Map">
		select member_no from dang_member where user_no=#{userNo} and dang_no=#{dangNo}
	</select>
	
	<!-- 댕모임 회원 단일조회 -->
	<select id="findMember" resultType="DangMemberDto" parameterType="DangMemberDto">
		select * from dang_member where user_no=#{userNo} and dang_no=#{dangNo}
	</select>
	
	<!-- ajax 댕모임 회원 단일조회 -->
	<select id="restFindMember" resultType="DangMemberDto" parameterType="int">
		select * from dang_member where member_no=#{memberNo}
	</select>
	
	<!-- 가입일 오래된 순으로 1명만 조회 -->
	<select id="oldOneMember" resultType="DangMemberDto" parameterType="int">
		select * from 
		    (select rownum rn, TMP.* from 
		        (select*from dang_member where dang_no=#{dangNo} and member_owner='N' order by member_joindate asc)
		    TMP ) 
		where rn=1
	</select>
	
	<!-- 댕모임 내 회원(리스트) 조회 -->
	<select id="memberList" resultType="MemberListVO" parameterType="int">
		select d.member_no, d.member_nick,d.member_message, d.member_owner, img.attachment_no 
			from dang_member d left outer join user_img img 
			on d.user_no=img.user_no where d.dang_no=#{dangNo} order by d.member_owner desc, d.member_nick asc
	</select>
	
	<!-- 댕모임 회원등급 포인트 증가 -->
	<update id="plusScore" parameterType="DangMemberDto">
		update dang_member set member_score=member_score+#{memberScore} where member_no=#{memberNo}
	</update>
	
	<!-- 댕모임 회원등급 포인트 감소 -->
	<update id="minusScore" parameterType="Map">
		update dang_member set member_score=member_score-#{memberScore} where member_no=#{memberNo}
	</update>
	
	<!-- 댕모임 회원 방장여부 변경 -->
	<update id="ownerUpdate" parameterType="int">
		update dang_member set member_owner='Y' where member_no=#{memberNo}
	</update>
	
	<!-- 댕회원 활동점수별 레벨 증가 -->
	<update id="upgrade">
		update dang_member set member_grade = case 
			when member_score>400 then 'LV.5'
			when member_score>300 then 'LV.4'
			when member_score>200 then 'LV.3'
			when member_score>100 then 'LV.2'
			else 'LV.1'
			end
		where NOT member_grade  in ('LV.5')
	</update>
	
	<!-- 댕모임 회원 포인트 조회 -->
	<select id="findScore" resultType="int" parameterType="int">
		select member_score from dang_member where member_no=#{memberNo}
	</select>
	
	<!-- 회원별 댕모임 수 조회-->
	<select id="joinScheduleCount" resultType="int" parameterType="int">
		select count(*) from dang_join where member_no=#{memberNo}
	</select>
	
	<!-- 프로필 파일번호 조회 -->
	<select id="findAttachmetNo" resultType="int" parameterType="int">
		select attachment_no from user_img where user_no=#{userNo}
	</select>
	
	<!-- 댕모임 내 닉네임 중복확인 -->
	<select id="checkNick" parameterType="Map" resultType="DangMemberDto">
		select * from dang_member where dang_no=#{dangNo} and member_nick=#{memberNick}
	</select>
	
	<!-- 댕모임 프로필 수정 -->
	<update id="editProfile" parameterType="MemberEditVO">
		update dang_member set member_nick=#{memberNick},
		member_message=#{memberMessage}
		where member_no=#{memberNo}
	</update>

	<!-- 특정 회원이 가입한 댕모임 목록을 번호로 조회 -->
	<select id = "searchDangAlreadyJoin" parameterType = "int" resultType = "int">
		select dang_no from dang_member where user_no = #{userNo}
	</select>
	
	<!-- 댕모임 가입 -->
	<insert id = "join" parameterType = "DangMemberJoinDto">
		insert into dang_member(member_no, dang_no, user_no, member_nick, member_message) values(#{memberNo}, #{dangNo}, #{userNo}, #{memberNick}, #{memberMessage})
	</insert>
	
	<!-- 특정 댕모임의 회원수 조회 -->
	<select id = "countMember" parameterType = "int" resultType = "int">
		select count(*) from dang_member where dang_no = #{dangNo}
	</select>
	
	<!-- 특정 회원이 특정 댕모임의 회원인지 조회 -->
	<select id = "isDangMember" parameterType = "map" resultType = "int">
		select count(member_no) from dang_member where user_no = #{userNo} and dang_no = #{dangNo}
	</select>
	
	<!-- 댕모임 회원 탈퇴 -->
	<delete id="deleteMember" parameterType = "map" >
		delete dang_member where dang_no=#{dangNo} and member_no=#{memberNo}
	</delete>
	
	<!-- 마이페이지 댕모임 회원 탈퇴 -->
	<delete id = "closeDangMember" parameterType = "map">
		delete dang_member where dang_no = #{dangNo} and user_no = #{userNo}
	</delete>
	
	 <!-- (관리자) 총 댕모임 멤버 수 -->
	<select id = "dangJoinCount" parameterType = "MemberListRequestDto" resultType = "int">
		select COUNT(*) from dang_member
	</select>
	
	<!-- (관리자) 댕모임 멤버 목록 전체/검색 조회-->
	<select id = "searchMemberListAdmin"   parameterType = "MemberListRequestDto" resultType = "MemberListDto">
  		select * from (
			select tmp.*, rownum rn from (
		  		select * from dang_member_info
				<where>
					<if test = "type != null and keyword != null">
						and instr(${type}, #{keyword}) > 0
					</if>
				</where>
				order by dang_no asc
	  		)tmp
		) where rn between #{rownumStart} and #{rownumEnd}
	</select>	
	
</mapper>