<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dangBoard">

	<!-- 시퀀스 발급-->
	<select id="sequence" resultType="int">
		select dang_board_seq.nextval from dual
	</select>

	<!-- 글 등록 -->
	<insert id="write" parameterType="DangBoardDto">
		insert into dang_board(board_no, member_no, dang_no, member_nick, board_content, board_like, 
		board_writedate, board_updatedate, board_state, board_category) 
		values(#{boardNo}, #{memberNo}, #{dangNo},#{memberNick}, #{boardContent}, 0,
		sysdate, sysdate, 'N', #{boardCategory})
	</insert>
	
	<!-- 게시글 좋아요 등록 -->
	<insert id="likeInsert" parameterType="DangBoardLikeDto">
		insert into dang_board_like(board_no, member_no) values(#{boardNo},#{memberNo})
	</insert>
	
	
	<!-- 댕모임 게시글 전체조회(동기방식 5개만)-->
	<!-- 게시글, 작성자 방장여부, 프로필, 게시글첨부파일(수), 댓글수 -->
	<select id="selectAll" resultType="BoardHistoryVO" parameterType="int">
		select*from(
		    select TMP.*, rownum rn from(
		        select total1.*, total2.board_attachment_cnt, total3.replycnt from (
				select b.*, m.member_owner, uimg.attachment_no from dang_board b
					left outer join dang_member m on b.member_no=m.member_no
					left outer join user_img uimg on m.user_no=uimg.user_no
					) total1 
					left outer join (
					select bimg.board_no, count(*) board_attachment_cnt from board_img bimg group by bimg.board_no
					) total2 on total1.board_no=total2.board_no
					left outer join (
					select reply.board_no, count(*) replycnt from dang_reply reply group by reply.board_no
					) total3 on total1.board_no=total3.board_no
				where total1.dang_no=#{dangNo} order by total1.board_no desc
		    )TMP
		) where rn between 1 and 5
	</select>

	<!-- 댕모임 게시글 복합검색조회(동기방식 5개만)-->
	<select id="inputSearch" resultType="BoardHistoryVO" parameterType="Map">
		select*from(
		    select TMP.*, rownum rn from(
		        select * from (
		        	select total1.*, total2.board_attachment_cnt, total3.replycnt from (
					select b.*, m.member_owner, uimg.attachment_no from dang_board b
						left outer join dang_member m on b.member_no=m.member_no
						left outer join user_img uimg on m.user_no=uimg.user_no
						) total1 
						left outer join (
						select bimg.board_no, count(*) board_attachment_cnt from board_img bimg group by bimg.board_no
						) total2 on total1.board_no=total2.board_no
						left outer join (
						select reply.board_no, count(*) replycnt from dang_reply reply group by reply.board_no
						) total3 on total1.board_no=total3.board_no
					where total1.dang_no=#{dangNo} order by total1.board_no desc
		        )
		        <where>

					<choose>
						<when test="category!=''">
				        	board_category like '%'||#{category}||'%'		        	

							<if test="keyword!=''">
								and instr(${type},#{keyword})>0
							</if>

						</when>
						<otherwise>
							<if test="keyword!=''">
								instr(${type},#{keyword})>0
							</if>						
						</otherwise>
					</choose>
		        	
		        </where>
		    )TMP
		) where rn between 1 and 5
	</select>
	
	<!-- 게시글 무한스크롤(비동기 방식 5개씩)-->
	<select id="moreviewList" resultType="BoardHistoryVO" parameterType="Map">
		select*from(
		    select TMP.*, rownum rn from(
		        select * from (
		        	select total1.*, total2.board_attachment_cnt, total3.replycnt from (
					select b.*, m.member_owner, uimg.attachment_no from dang_board b
						left outer join dang_member m on b.member_no=m.member_no
						left outer join user_img uimg on m.user_no=uimg.user_no
						) total1 
						left outer join (
						select bimg.board_no, count(*) board_attachment_cnt from board_img bimg group by bimg.board_no
						) total2 on total1.board_no=total2.board_no
						left outer join (
						select reply.board_no, count(*) replycnt from dang_reply reply group by reply.board_no
						) total3 on total1.board_no=total3.board_no
					where total1.dang_no=#{dangNo} and <![CDATA[total1.board_no<#{boardNo}]]>
					and <![CDATA[total1.board_no>0]]>
					order by total1.board_no desc
		        )
		        <where>
					<if test="category!=''">
						board_category like '%'||#{category}||'%'
					</if>						
		        </where>
		    )TMP
		) where rn between 1 and 5
	</select>
	
	<!-- 내가 쓴 게시글 조회-->
	<select id="writeCount" resultType="int" parameterType="int">
		select count(*) from dang_board where member_no=#{memberNo}
	</select>
	
	<!-- 오늘 쓴 게시글 수 조회-->
	<select id="dayWriteCount" resultType="int" parameterType="Map">
		select count(*) dayCnt from (
			select * from dang_board 
				where member_no=#{memberNo} and dang_no=#{dangNo} 
					and TO_CHAR(board_writedate, 'YYYY-MM-DD')=#{boardWriteDate})
	</select>
	
	<!-- 좋아요 테이블 조회 -->
	<select id="findLike" resultType="DangBoardLikeDto" parameterType="int">
		select * from dang_board_like where member_no=#{memberNo}
	</select>
	
	<!-- 게시글 첨부파일 등록 -->
	<insert id="imgInsert" parameterType="BoardImgDto">
		insert into board_img(board_no, attachment_no) values(#{boardNo},#{attachmentNo})
	</insert>
	
	<!-- 게시글 첨부파일 조회 -->
	<select id="findImg" resultType="BoardImgDto" parameterType="int">
		select * from board_img where board_no=#{boardNo}
	</select>
	
	<!-- 댕모임 내 첨부파일 조회 -->
	<select id="albumImg" resultType="DangAlbumVO" parameterType="int">
		select*from(
		    select TMP.*, rownum rn from(
		        select img.*, b.dang_no from board_img img inner join dang_board b 
                on img.board_no=b.board_no
                where b.dang_no=#{dangNo} order by img.attachment_no desc
		    )TMP
		) where rn between 1 and 10
	</select>
	
	<!-- 무한스크롤 댕모임 내 첨부파일 조회 -->
	<select id="moreAlbumImg" resultType="DangAlbumVO" parameterType="Map">
		select*from(
		    select TMP.*, rownum rn from(
		        select*from (select img.*, b.dang_no from board_img img inner join dang_board b 
				on img.board_no=b.board_no
				where b.dang_no=#{dangNo} order by img.attachment_no desc) 
				a where <![CDATA[a.attachment_no<#{attachmentNo}]]>
		    )TMP
		) where rn between 1 and 10
	</select>
	
	<update id="editBoard" parameterType="BoardEditVO">
		update dang_board set board_category=#{boardCategory}, board_content=#{boardContent} 
		where board_no=#{boardNo}
	</update>
	
	<!-- 게시글 좋아요 수 증가 -->
	<update id="plusLike" parameterType="int">
		update dang_board set board_like=board_like+1 where board_no=#{boardNo}
	</update>
	
	<!-- 게시글 좋아요 수 감소 -->
	<update id="minusLike" parameterType="int">
		update dang_board set board_like=board_like-1 where board_no=#{boardNo}
	</update>
	
	<!-- 기존 게시글 닉네임 변경 -->
	<update id="updateNick" parameterType="DangBoardDto">
		update dang_board set member_nick=#{memberNick} where member_no=#{memberNo}
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="delete" parameterType="int">
		delete dang_board where board_no=#{boardNo}
	</delete>
	
	<!-- 좋아요 삭제 -->
	<delete id="deleteLike" parameterType="DangBoardLikeDto">
		delete dang_board_like where board_no=#{boardNo} and member_no=#{memberNo}
	</delete>
  
</mapper>
  
  
  